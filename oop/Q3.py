# This is a sample Python script.
import re


def run_code(ips=None):
    regx = r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'
    pattern = re.compile(regx)
    for _ip in ips:
        print(_ip, '   :-->:\t', pattern.search(_ip))


def ip_list():
    return ['123.255.255.255', '3.255.025.255', '123.25.255.075', '123.2.255.255', '123.085.25.455', '123.255.266.255',
            '13.255.265.255', '3.255.255.255', '123.25.255.275', '123.2.255.255', '123.285.25.255', '123.255.266.255',
            '123.265.255.25', '293.255.255.2', '1.255.1.562', '120.231.266.2', '120.245.125.612', '265.215.0.521',
            '123.255.266.255', '293.265.255.25', '293.255.255.2', '1.255.1.562', '120.231.266.2', '001.1.1.1',
            '127.000.000.001', '000.12.12.3', '000.000.000.000']


if __name__ == '__main__':
    run_code(ip_list())



#############################################   OUTPUT
# /usr/bin/python3.10 /home/sask/Documents/edureka/python-essentials/oop/Q3.py
# 123.255.255.255    :-->:	 <re.Match object; span=(0, 15), match='123.255.255.255'>
# 3.255.025.255    :-->:	 <re.Match object; span=(0, 13), match='3.255.025.255'>
# 123.25.255.075    :-->:	 <re.Match object; span=(0, 14), match='123.25.255.075'>
# 123.2.255.255    :-->:	 <re.Match object; span=(0, 13), match='123.2.255.255'>
# 123.085.25.455    :-->:	 None
# 123.255.266.255    :-->:	 None
# 13.255.265.255    :-->:	 None
# 3.255.255.255    :-->:	 <re.Match object; span=(0, 13), match='3.255.255.255'>
# 123.25.255.275    :-->:	 None
# 123.2.255.255    :-->:	 <re.Match object; span=(0, 13), match='123.2.255.255'>
# 123.285.25.255    :-->:	 None
# 123.255.266.255    :-->:	 None
# 123.265.255.25    :-->:	 None
# 293.255.255.2    :-->:	 None
# 1.255.1.562    :-->:	 None
# 120.231.266.2    :-->:	 None
# 120.245.125.612    :-->:	 None
# 265.215.0.521    :-->:	 None
# 123.255.266.255    :-->:	 None
# 293.265.255.25    :-->:	 None
# 293.255.255.2    :-->:	 None
# 1.255.1.562    :-->:	 None
# 120.231.266.2    :-->:	 None
# 001.1.1.1    :-->:	 <re.Match object; span=(0, 9), match='001.1.1.1'>
# 127.000.000.001    :-->:	 <re.Match object; span=(0, 15), match='127.000.000.001'>
# 000.12.12.3    :-->:	 <re.Match object; span=(0, 11), match='000.12.12.3'>
# 000.000.000.000    :-->:	 <re.Match object; span=(0, 15), match='000.000.000.000'>
#
# Process finished with exit code 0